/* LINEAR ADVECTION EQUATION */

// IBVP PARAMETERS ####################################################
// A FEW CONSTANTS ----------------------------------------------------
#define SIXTH (1.0/6.0)
// --------------------------------------------------------------------

// DISTANCE FUNCTIONS DESCRIPTION -------------------------------------
#define PHI_TYPE_ONE_PHASE -1
#define PHI_TYPE_TWO_PHASES_PERIODIC 0
#define PHI_TYPE_TWO_PHASES_NI_SUPER_ALLOY 1
#define PHI_TYPE_TWO_PHASES_PARTICLES 2
#define PHI_TYPE_TWO_PHASES_WOVEN_COMPOSITE 3
#define PHI_TYPE_TWO_PHASES_AMREX 100

#define PHI_TYPE 3
// --------------------------------------------------------------------

// NUMBER OF DISTANCE FUNCTIONS/DOMAINS/UNKNOWN FIELDS ----------------
#if (PHI_TYPE == PHI_TYPE_ONE_PHASE)

#define N_PHI 1
#define N_DOM 1
#define N_U 1

#elif ((PHI_TYPE == PHI_TYPE_TWO_PHASES_PERIODIC) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_NI_SUPER_ALLOY) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_PARTICLES) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_WOVEN_COMPOSITE) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_AMREX))

#define N_PHI 1
#define N_DOM 2
#define N_U 2

#endif
// --------------------------------------------------------------------

// PDES PARAMETERS --------
#define CONSTANT_VELOCITY 1
#define SINGLE_VORTEX 2
#define VELOCITY_FIELD 1
// ------------------------

// DG-METHOD PARAMETERS -----------------------------------------------
#define DG_NUM_FLUX_LF 0
#define DG_NUM_FLUX_UPW 1
#define DG_NUM_FLUX 1
// --------------------------------------------------------------------
// ####################################################################

// IBVP CLASS #########################################################
class LINADV
{
private:
    // DATA MEMBERS ===================================================
    // PARAMETERS

    // VARIABLES

    // AUXILIARY DATA MEMBERS
    // ================================================================
public:
    // CONSTRUCTOR ====================================================
    // ================================================================

    // DISTRUCTOR =====================================================
    // ================================================================

    // DISTANCE FUNCTION ==============================================
    AMREX_GPU_HOST_DEVICE
    amrex::Real F_PHI(const int & ph,
                      const amrex::Real & t, const amrex::Real * x) const
    {
#if (PHI_TYPE == PHI_TYPE_ONE_PHASE)
        const amrex::Real PHI[N_PHI] = {-1.0};

#elif (PHI_TYPE == PHI_TYPE_TWO_PHASES_PERIODIC)

#if (AMREX_SPACEDIM == 2)
        const amrex::Real x1 = x[0];
        const amrex::Real x2 = x[1];
        const amrex::Real phi = 0.125-std::cos(2.0*M_PI*x1)*std::cos(2.0*M_PI*x2);
#endif

#if (AMREX_SPACEDIM == 3)
        const amrex::Real x1 = x[0];
        const amrex::Real x2 = x[1];
        const amrex::Real x3 = x[2];
        const amrex::Real phi = 0.125+std::cos(2.0*M_PI*x1)*std::cos(2.0*M_PI*x2)*std::cos(2.0*M_PI*x3);
#endif

        const amrex::Real PHI[N_PHI] =
        {
            -phi
        };

#elif ((PHI_TYPE == PHI_TYPE_TWO_PHASES_NI_SUPER_ALLOY) && (AMREX_SPACEDIM == 2))
        
        const int N1 = 10;
        const int N2 = 10;
        const amrex::Real a0 = 21.2114;
        const amrex::Real ai0[N1] = {-1.3436, -6.1476, 15.4014, 1.4007, -2.6282, 4.1179, -0.6291, 0.5134, -0.1263, -1.3253};
        const amrex::Real bi0[N1] = { 1.4799, 2.4227, -11.3006, -0.7160, 6.4279, -9.2296, -1.5588, 5.5702, -4.8966, -0.1376};
        const amrex::Real a0j[N2] = {-2.4875, -1.4018, 18.7421, 0.9640, -0.4863, 7.4555, 2.7945, -0.5062, 2.2701, 2.3874};
        const amrex::Real b0j[N2] = {-3.5927, -3.3181, 3.0541, -6.7412, -4.4468, 0.6943, -5.9835, -2.7449, -2.0341, -3.9009};
        const amrex::Real aij[N1][N2] = {-2.3917, -5.4533,  2.0685,  2.6789, -6.0493,  2.0494,  0.0283, -1.4181,  0.9455, -2.7387,
                                         -4.6790,  1.1841, -0.9350,  0.4469,  1.1806, -1.9766,  4.2152,  0.1223, -1.8499,  5.0886,
                                         -2.3729,  1.3692,  4.0183, -0.4128,  0.4480, -0.8684, -0.4769,  0.3994, -1.2161, -0.8876,
                                          2.5854, -2.6860,  0.2886,  2.0422, -1.6437,  0.1585, -0.4809, -0.3496,  0.4173, -0.8657,
                                          1.6823, -1.0859,  0.3561,  2.6460, -0.4636, -0.6565,  2.2719, -0.5205, -0.0108,  0.9932,
                                          0.8038,  0.5698,  1.2804,  1.8177, -0.4472, -0.7387,  1.0378,  0.2147, -0.6732, -0.0305,
                                          2.4619, -1.1412,  0.9809,  0.8827, -0.3293,  0.6412, -0.5708,  0.4658,  0.0983, -0.7828,
                                          4.1133, -3.2601, -0.8189,  0.5475, -0.9611, -0.0046, -0.3058, -0.0902,  0.4861, -0.6438,
                                          3.6702, -1.8152,  1.1230,  0.7713, -0.6693, -0.0836, -0.0934, -0.0529, -0.0447, -0.1650,
                                          1.8017,  0.2088,  2.5771,  1.0680,  0.2079,  0.2495, -0.8116,  0.2999, -0.2969, -1.0570};
        const amrex::Real bij[N1][N2] = {0.6024,  1.0671, -2.4426,  5.3310, -3.1912, -3.2027,  6.0091, -3.9344, -1.8369,  2.6995,
                                         3.3221,  2.2005,  2.9660, -0.7771,  1.9055,  1.8466, -2.2060,  1.6431, -0.4715, -0.8582,
                                         1.0954,  0.2856,  0.9708, -0.3137,  0.7804, -0.0730,  1.0350,  1.2152,  0.9721,  1.5836,
                                        -1.5798, -1.1918, -2.3388,  1.6441, -1.5936, -2.5233, -0.1697, -0.1881, -0.7376, -1.6498,
                                        -0.4154, -0.7420,  1.4164, -0.9554, -0.6828, -0.4110, -1.2546,  0.0267, -0.8273, -1.2286,
                                         2.7179,  2.3200,  1.5933,  0.2708,  0.2009,  0.7417,  1.1640, -0.2524,  0.4271,  1.0849,
                                         1.7494,  0.9694, -0.5959,  0.4654, -0.0915, -0.0281, -1.0732,  0.0219,  0.8223, -0.8510,
                                        -1.1299, -1.8192, -0.3713,  0.7885,  0.3331, -0.4953, -0.4071,  0.7226,  0.4878, -0.6725,
                                         0.0464, -0.1747,  0.9930,  0.0797, -0.3456,  0.2033,  0.0745,  0.3522,  0.0169, -0.0615,
                                         2.4332,  1.8997,  0.9412, -1.2259, -0.8425,  0.0877, -0.6589, -0.4448,  0.3971,  0.0281};
        const amrex::Real cij[N1][N2] = {1.3119, -5.8445, -2.6402,  5.5230, -4.4525, -4.3813,  6.5845, -2.1403, -3.2812,  5.5912,
                                         3.9579, -4.5177, -0.6872,  4.4106, -4.9187, -2.7317,  3.9153, -2.3326, -2.6527,  2.4981,
                                         2.2254, -1.6634, -1.9600,  1.7732, -1.5685, -0.1849,  1.9516, -0.2161, -0.1786,  1.5086,
                                         1.7442, -0.7590, -0.8999,  1.6719,  0.2074, -0.7507,  0.9640,  0.5774,  0.0882, -0.6541,
                                         6.1640, -4.8921, -1.7464,  1.6744, -2.9753, -1.6120, -0.7567, -0.4501, -0.3133, -0.9696,
                                         4.7833, -3.0060,  1.4192,  1.4767, -0.9694,  0.9815,  0.5340, -0.0231,  0.7841,  0.5651,
                                         0.2199,  1.1688,  1.2225,  1.8402,  0.8932, -0.0765,  0.6870,  0.7508,  0.3306, -1.1995,
                                         2.5587, -2.3411, -2.7052,  0.3305, -0.7128, -1.6739, -0.4426,  1.1464, -0.6480,  0.1544,
                                         3.0052, -2.2787,  1.7624, -0.7721,  0.1858,  1.0552, -0.1116,  0.4195,  0.7678,  0.6179,
                                        -0.2241,  1.1177,  0.1229,  1.0600,  0.1082, -0.3338, -0.1431, -0.4745,  0.5719, -0.9986};
        const amrex::Real dij[N1][N2] = {-2.8182, -0.1993,  2.2332,  1.0385, -0.2984,  0.7369,  3.3397,  0.4618, -1.1536,  3.4736,
                                         -2.1047, -0.2798,  0.4282,  1.1453, -1.4653,  0.1247,  4.2785, -0.7168, -0.5556,  4.2301,
                                          2.1786,  2.3434,  1.2053,  0.7393,  0.2735,  1.9179,  0.2658, -0.3836,  0.7303,  0.1598,
                                          1.8049,  1.0208,  1.8895,  0.0251,  1.1463,  0.7867,  0.0062,  0.5470,  0.4242, -0.1489,
                                         -2.5329, -1.7007, -1.5904,  2.7823, -0.6683, -1.0970,  3.2211,  0.8631,  0.1988,  1.4305,
                                         -1.4290, -1.0087,  0.6284, -0.6852, -1.6138,  0.3030, -1.4359, -0.0908, -0.4780, -1.5887,
                                          2.7830,  2.3839,  2.8309, -1.0900,  0.3246,  0.3933,  0.2537, -0.6530, -0.2824,  0.1562,
                                          0.9492,  1.5192, -1.0540,  3.2914,  0.7620,  0.0504,  2.2606,  0.8375,  0.2412,  0.6960,
                                         -2.4015, -2.2767, -0.1598, -0.3289, -0.0481,  0.2553, -1.3946,  0.9885,  0.3143, -0.7706,
                                          0.3673,  0.5405,  1.6557, -0.5033,  0.1342, -0.7955,  0.8969, -0.2874, -0.1618,  0.3679};

        amrex::Real phi;

        phi = a0;
        for (int i = 1; i <= N1; ++i)
        {
            phi += ai0[i-1]*std::cos(i*2.0*M_PI*x[0]);
            phi += bi0[i-1]*std::sin(i*2.0*M_PI*x[0]);
        }
        for (int j = 1; j <= N2; ++j)
        {
            phi += a0j[j-1]*std::cos(j*2.0*M_PI*x[1]);
            phi += b0j[j-1]*std::sin(j*2.0*M_PI*x[1]);
        }

        for (int i = 1; i <= N1; ++i)
        for (int j = 1; j <= N2; ++j)
        {
            phi += aij[i-1][j-1]*std::cos(i*2.0*M_PI*x[0])*std::cos(j*2.0*M_PI*x[1]);
            phi += bij[i-1][j-1]*std::cos(i*2.0*M_PI*x[0])*std::sin(j*2.0*M_PI*x[1]);
            phi += cij[i-1][j-1]*std::sin(i*2.0*M_PI*x[0])*std::cos(j*2.0*M_PI*x[1]);
            phi += dij[i-1][j-1]*std::sin(i*2.0*M_PI*x[0])*std::sin(j*2.0*M_PI*x[1]);
        }

        const amrex::Real PHI[N_PHI] =
        {
            phi-35.0
        };

#elif ((PHI_TYPE == PHI_TYPE_TWO_PHASES_WOVEN_COMPOSITE) && (AMREX_SPACEDIM == 3))
        amrex::Real phi;
        const amrex::Real f0 = 1.0-(      x[1]/0.2)*(      x[1]/0.2)-((x[2]-0.25*std::cos(2.0*M_PI*x[0])-0.5)/0.15)*((x[2]-0.25*std::cos(2.0*M_PI*x[0])-0.5)/0.15);
        const amrex::Real f1 = 1.0-((x[1]-0.5)/0.2)*((x[1]-0.5)/0.2)-((x[2]+0.25*std::cos(2.0*M_PI*x[0])-0.5)/0.15)*((x[2]+0.25*std::cos(2.0*M_PI*x[0])-0.5)/0.15);
        const amrex::Real f2 = 1.0-((x[1]-1.0)/0.2)*((x[1]-1.0)/0.2)-((x[2]-0.25*std::cos(2.0*M_PI*x[0])-0.5)/0.15)*((x[2]-0.25*std::cos(2.0*M_PI*x[0])-0.5)/0.15);
        const amrex::Real f3 = 1.0-(      x[0]/0.2)*(      x[0]/0.2)-((x[2]+0.25*std::cos(2.0*M_PI*x[1])-0.5)/0.15)*((x[2]+0.25*std::cos(2.0*M_PI*x[1])-0.5)/0.15);
        const amrex::Real f4 = 1.0-((x[0]-0.5)/0.2)*((x[0]-0.5)/0.2)-((x[2]-0.25*std::cos(2.0*M_PI*x[1])-0.5)/0.15)*((x[2]-0.25*std::cos(2.0*M_PI*x[1])-0.5)/0.15);
        const amrex::Real f5 = 1.0-((x[0]-1.0)/0.2)*((x[0]-1.0)/0.2)-((x[2]+0.25*std::cos(2.0*M_PI*x[1])-0.5)/0.15)*((x[2]+0.25*std::cos(2.0*M_PI*x[1])-0.5)/0.15);
        
        phi = f0;
        phi = std::max(phi, f1);
        phi = std::max(phi, f2);
        phi = std::max(phi, f3);
        phi = std::max(phi, f4);
        phi = std::max(phi, f5);

        const amrex::Real PHI[N_PHI] =
        {
            phi
        };


#elif ((PHI_TYPE == PHI_TYPE_TWO_PHASES_PARTICLES) && (AMREX_SPACEDIM == 2))
        const int Np = 15;
        const amrex::Real rp[Np] = {0.025, 0.025, 0.025, 0.054, 0.054, 0.1, 0.1, 0.07, 0.07, 0.07, 0.07, 0.06, 0.06, 0.06, 0.06};
        const amrex::Real x0[Np] = {0.05, 0.50, 0.69, 0.34, 0.67, 0.12, 0.79, 0.30, 0.35, 0.85, 0.79, 0.49, 0.86, 0.57, 0.11};
        const amrex::Real x1[Np] = {0.55, 0.50, 0.43, 0.47, 0.70, 0.80, 0.23, 0.24, 0.71, 0.87, 0.52, 0.87, 0.64, 0.17, 0.33};
        
        amrex::Real phi;

        phi = rp[0]*rp[0]-(x[0]-x0[0])*(x[0]-x0[0])-(x[1]-x1[0])*(x[1]-x1[0]);
        for (int p = 1; p < Np; ++p)
        {
            phi = std::max(phi, rp[p]*rp[p]-(x[0]-x0[p])*(x[0]-x0[p])-(x[1]-x1[p])*(x[1]-x1[p]));
        }

        const amrex::Real PHI[N_PHI] =
        {
            phi
        };


#elif ((PHI_TYPE == PHI_TYPE_TWO_PHASES_AMREX) && (AMREX_SPACEDIM == 2))
        const int N1 = 30;
        const int N2 = 30;
        const amrex::Real a0 = 232.7134;
        const amrex::Real ai0[N1] = {3.8459, 0.67434, 4.4766, 2.1269, 5.9029, 2.7254, 0.92472, 2.0614, 1.8155, 2.8891, 
                                     0.57723, -3.9211, -0.71368, 0.97213, -1.0417, 2.0676, -3.9858, 1.6832, -0.071927, 0.53902, 
                                    -1.1753, -0.57436, -0.098137, 0.67248, -0.054745, -0.20767, 0.12098, 0.11645, 0.29243, -0.12225};
        const amrex::Real bi0[N1] = {-2.2304, -0.15475, -0.46892, 0.79672, -1.5217, -4.4578, 3.1268, 1.1672, -5.3218, 0.86602, 
                                     -3.9995, 7.0176, -3.1967, 0.22763, -0.51741, 3.3106, 1.4871, -2.1753, -0.034591, 0.78902, 
                                     2.171, -0.10783, -0.30498, -0.14839, 0.24204, -0.47089, -0.47721, -0.50619, 0.038249, 0.37963};
        const amrex::Real a0j[N2] = {41.947, -34.6766, 24.4119, -13.3749, 3.7465, 2.8992, -5.943, 5.7628, -3.4807, 0.52551, 
                                     1.8362, -2.8459, 2.3846, -0.87624, -0.96786, 2.4538, -3.1452, 2.9669, -2.1584, 1.122, 
                                    -0.24111, -0.25789, 0.35378, -0.18778, -0.036107, 0.15577, -0.11536, -0.031478, 0.17041, -0.1969};
        const amrex::Real b0j[N2] = {3.723, -6.4288, 7.4402, -6.6372, 4.4762, -1.8065, -0.44154, 1.582, -1.3937, 0.16065, 
                                     1.4718, -2.7616, 3.1518, -2.4625, 0.92985, 0.91168, -2.449, 3.2205, -3.0709, 2.1771, 
                                     -0.94928, -0.14583, 0.7634, -0.79258, 0.36595, 0.22646, -0.67435, 0.77586, -0.50705, 0.010887};
        const amrex::Real aij[N1][N2] = {-7.1013, 5.4885, -3.2815, 1.0475, 0.67434, -1.5251, 1.4138, -0.51904, -0.7909, 
                                 2.0862, -3.0072, 3.3577, -3.1346, 2.4945, -1.6764, 0.91399, -0.36632, 0.087937, -0.038945, 
                                 0.12369, -0.23801, 0.30659, -0.29969, 0.22875, -0.12836, 0.035447, 0.025529, -0.047453, 0.037081, 
                                 -0.0077352, -1.4604, 1.7739, -2.2276, 2.7281, -3.1652, 3.431, -3.4418, 3.1572, 
                                 -2.5937, 1.8246, -0.96801, 0.16133, 0.4699, -0.84169, 0.93085, -0.77788, 0.47237, -0.1253, 
                                 -0.16309, 0.32987, -0.3622, 0.29296, -0.18189, 0.089793, -0.055513, 0.083937, -0.14883, 0.20837, 
                                 -0.22648, 0.19084, -8.3683, 6.7336, -4.38, 1.7661, 0.63245, -2.432, 3.4193, 
                                 -3.5811, 3.0812, -2.1967, 1.2352, -0.4567, 0.020115, 0.035114, 0.2257, -0.6708, 1.149, 
                                 -1.5314, 1.7381, -1.746, 1.5812, -1.3008, 0.97183, -0.65351, 0.38638, -0.18923, 0.0625, 
                                 0.0042621, -0.024216, 0.0068754, -4.535, 5.2465, -6.0388, 6.4707, -6.1691, 4.9662, 
                                 -2.9678, 0.52951, 1.8493, -3.6765, 4.6112, -4.5545, 3.6611, -2.2725, 0.80082, 0.39554, 
                                 -1.1036, 1.2899, -1.0731, 0.655, -0.23683, -0.04553, 0.1506, -0.12021, 0.040178, 0.0068783, 
                                 0.022836, -0.12227, 0.24558, -0.33514, -11.6148, 11.0349, -10.0559, 8.6905, -7.001, 
                                 5.1119, -3.1973, 1.4441, -0.0043805, -1.0454, 1.7204, -2.1113, 2.3415, -2.5152, 2.6758, 
                                 -2.7934, 2.7859, -2.5644, 2.0842, -1.3791, 0.56415, 0.19576, -0.73986, 0.96651, -0.868, 
                                 0.53143, -0.10555, -0.25334, 0.43548, -0.4115, -5.1971, 4.4953, -3.505, 2.4379, 
                                 -1.4964, 0.82014, -0.45831, 0.37284, -0.46836, 0.63391, -0.77988, 0.85756, -0.85768, 0.79391, 
                                 -0.68247, 0.52919, -0.32999, 0.082614, 0.19828, -0.47304, 0.68243, -0.76648, 0.68941, -0.4594, 
                                 0.13321, 0.19826, -0.43926, 0.52259, -0.43383, 0.21654, -1.4264, 0.2555, 1.3914, 
                                 -3.1337, 4.572, -5.3819, 5.3887, -4.6044, 3.2191, -1.5475, -0.052016, 1.2676, -1.9065, 
                                 1.9332, -1.4631, 0.71751, 0.047756, -0.61522, 0.86101, -0.77673, 0.45472, -0.044781, -0.30126, 
                                 0.47822, -0.45452, 0.27109, -0.015893, -0.21423, 0.34971, -0.3696, -3.1443, 0.4989, 
                                 3.0359, -6.4445, 8.7907, -9.4972, 8.4951, -6.2011, 3.3414, -0.6926, -1.1655, 2.0025, 
                                 -1.9525, 1.4023, -0.80815, 0.51497, -0.64587, 1.0929, -1.6002, 1.8951, -1.809, 1.3413, 
                                 -0.64588, -0.044285, 0.51829, -0.66831, 0.51956, -0.20192, -0.11871, 0.31579, -3.3095, 
                                 2.4422, -1.2875, 0.17613, 0.60027, -0.8842, 0.69758, -0.22268, -0.27207, 0.53298, -0.41136, 
                                 -0.088566, 0.81915, -1.5497, 2.0532, -2.1858, 1.9316, -1.3985, 0.76973, -0.23311, -0.084391, 
                                 0.15344, -0.03895, -0.13814, 0.25591, -0.24041, 0.090071, 0.13194, -0.33106, 0.42479, 
                                 -5.7172, 5.5072, -5.0854, 4.3982, -3.4519, 2.3449, -1.2619, 0.42845, -0.040242, 0.19252, 
                                 -0.83819, 1.7918, -2.7802, 3.5238, -3.8195, 3.5976, -2.9335, 2.0132, -1.0668, 0.29516, 
                                 0.18494, -0.3607, 0.30599, -0.13846, -0.02966, 0.12829, -0.14227, 0.10003, -0.047412, 0.020462, 
                                 -0.8634, 0.11363, 0.77354, -1.4065, 1.4794, -0.89493, -0.19279, 1.433, -2.4072, 
                                 2.7837, -2.4363, 1.4864, -0.25276, -0.86774, 1.5409, -1.6052, 1.1126, -0.2897, -0.5584, 
                                 1.1627, -1.3784, 1.2166, -0.8157, 0.36896, -0.043354, -0.079096, 0.017126, 0.13675, -0.26887, 
                                 0.2973, 7.3137, -5.8393, 3.7241, -1.3902, -0.7266, 2.2781, -3.0755, 3.1152, 
                                 -2.5545, 1.6504, -0.68018, -0.12967, 0.6502, -0.86115, 0.82999, -0.67015, 0.49465, -0.38011, 
                                 0.35041, -0.38183, 0.42378, -0.42557, 0.3586, -0.22677, 0.062784, 0.086827, -0.18126, 0.20196, 
                                 -0.16009, 0.092339, 1.4782, -1.5811, 1.6077, -1.4042, 0.8585, 0.043663, -1.1951, 
                                 2.3858, -3.3586, 3.8849, -3.8345, 3.2162, -2.1769, 0.95773, 0.17631, -1.0105, 1.4351, 
                                 -1.4635, 1.2109, -0.84397, 0.51974, -0.33621, 0.30982, -0.38506, 0.46937, -0.47783, 0.36989, 
                                 -0.16478, -0.06872, 0.24236, -1.4879, 0.23923, 1.4745, -3.2119, 4.5396, -5.1474, 
                                 4.9231, -3.9674, 2.5488, -1.0157, -0.30399, 1.185, -1.5482, 1.4559, -1.0685, 0.58049, 
                                 -0.15874, -0.098564, 0.17363, -0.11359, -0.0019033, 0.095655, -0.11877, 0.060651, 0.056443, -0.19268, 
                                 0.30815, -0.37595, 0.38749, -0.35039, 2.0197, -1.8566, 1.6681, -1.5459, 1.564, 
                                 -1.7481, 2.0616, -2.4127, 2.6809, -2.7551, 2.5696, -2.1266, 1.4974, -0.80246, 0.17644, 
                                 0.27054, -0.48231, 0.46845, -0.29528, 0.060271, 0.14085, -0.24323, 0.22894, -0.12588, -0.0086258, 
                                 0.11238, -0.14198, 0.087219, 0.028004, -0.1573, -4.0741, 3.9076, -3.6752, 3.4136, 
                                 -3.1293, 2.7861, -2.3171, 1.6586, -0.79216, -0.22432, 1.2531, -2.1073, 2.6067, -2.6397, 
                                 2.2072, -1.4296, 0.51418, 0.30842, -0.85428, 1.0388, -0.89333, 0.54196, -0.14911, -0.14084, 
                                 0.24957, -0.18121, 0.0065228, 0.17538, -0.28024, 0.26957, 7.3542, -5.6799, 3.421, 
                                 -1.1827, -0.49682, 1.3132, -1.2701, 0.63963, 0.16791, -0.76975, 0.94613, -0.69718, 0.20705, 
                                 0.26082, -0.48777, 0.39063, -0.044198, -0.36733, 0.64294, -0.65739, 0.4133, -0.032443, -0.30588, 
                                 0.44901, -0.33896, 0.034828, 0.31809, -0.55648, 0.57256, -0.36028, -3.1766, 2.6595, 
                                 -1.9533, 1.232, -0.6442, 0.26553, -0.082175, 0.010364, 0.058076, -0.20434, 0.44715, -0.73725, 
                                 0.98256, -1.0918, 1.0171, -0.77622, 0.44706, -0.13564, -0.066595, 0.11819, -0.04106, -0.093009, 
                                 0.19591, -0.20162, 0.093018, 0.09369, -0.28759, 0.41559, -0.43411, 0.3463, -0.023272, 
                                 0.45792, -0.9856, 1.3911, -1.5008, 1.2487, -0.70091, 0.029866, 0.55066, -0.86433, 0.83462, 
                                 -0.50798, 0.03082, 0.40893, -0.6519, 0.62219, -0.34791, -0.058046, 0.44634, -0.68836, 0.72009, 
                                 -0.55748, 0.28091, 0.0022337, -0.19993, 0.26626, -0.21035, 0.083123, 0.049754, -0.13597, 
                                 -0.83879, 0.19993, 0.63051, -1.39, 1.8538, -1.9102, 1.5911, -1.0485, 0.48901, -0.092808, 
                                 -0.050349, -0.035255, 0.23434, -0.39788, 0.40924, -0.23171, -0.080564, 0.41051, -0.63101, 0.6594, 
                                 -0.49089, 0.19823, 0.10068, -0.29227, 0.31275, -0.17126, -0.057488, 0.26652, -0.36097, 0.29514,
                                 2.1528, -1.6167, 0.89525, -0.18966, -0.31288, 0.49534, -0.34324, -0.056303, 0.54714, 
                                 -0.95625, 1.1478, -1.0621, 0.72722, -0.24357, -0.25356, 0.63764, -0.82725, 0.80425, -0.6104, 
                                 0.32641, -0.042784, -0.1671, 0.26353, -0.24348, 0.13221, 0.031028, -0.20686, 0.36465, -0.48508, 
                                 0.55807, 1.0377, -0.74582, 0.37847, -0.060101, -0.11942, 0.14281, -0.071408, 0.01621, 
                                 -0.086235, 0.33646, -0.73791, 1.1834, -1.527, 1.642, -1.4722, 1.0575, -0.52043, 0.022036, 
                                 0.29801, -0.37122, 0.22186, 0.047482, -0.29938, 0.41577, -0.34142, 0.10048, 0.21859, -0.50158, 
                                 0.6539, -0.63466, 0.24626, -0.37059, 0.50267, -0.56197, 0.48709, -0.26202, -0.074606, 
                                 0.44081, -0.73882, 0.88839, -0.85358, 0.65348, -0.35363, 0.04232, 0.19894, -0.31992, 0.31296, 
                                 -0.2087, 0.059445, 0.081942, -0.17947, 0.22191, -0.21982, 0.19506, -0.1684, 0.15088, -0.14197, 
                                 0.13395, -0.11936, 0.09696, -1.3676, 1.4286, -1.5084, 1.58, -1.6142, 1.5861, 
                                 -1.4797, 1.2899, -1.0241, 0.70109, -0.34959, 0.0059959, 0.28932, -0.4973, 0.58702, -0.54297, 
                                 0.37106, -0.10097, -0.21687, 0.52001, -0.7469, 0.85098, -0.81181, 0.64015, -0.375, 0.073598, 
                                 0.20291, -0.40396, 0.50015, -0.48756, 0.13752, -0.20559, 0.27295, -0.29283, 0.23418, 
                                 -0.096799, -0.086953, 0.26474, -0.38574, 0.42166, -0.37825, 0.29234, -0.21565, 0.19244, -0.24052, 
                                 0.34348, -0.45743, 0.52896, -0.51685, 0.40853, -0.22487, 0.012095, 0.17546, -0.29424, 0.32477, 
                                 -0.27502, 0.17374, -0.05794, -0.039915, 0.099963, 0.40318, -0.36831, 0.31458, -0.24544, 
                                 0.16186, -0.062423, -0.053677, 0.18201, -0.30928, 0.41346, -0.46903, 0.45632, -0.37144, 0.23227, 
                                 -0.076983, -0.046049, 0.094001, -0.045708, -0.088289, 0.26631, -0.4275, 0.51149, -0.47903, 0.32597, 
                                 -0.08547, -0.18264, 0.41143, -0.54837, 0.57107, -0.49209, -0.22353, 0.16695, -0.07144, 
                                 -0.055795, 0.19289, -0.30278, 0.34152, -0.27399, 0.090838, 0.18074, -0.4786, 0.72106, -0.83201, 
                                 0.76683, -0.52956, 0.17432, 0.21029, -0.5284, 0.70631, -0.71359, 0.56896, -0.32964, 0.069197, 
                                 0.14751, -0.28293, 0.33336, -0.32255, 0.28665, -0.25753, 0.25118, -0.18365, 0.050046, 
                                 0.13008, -0.30744, 0.43634, -0.48719, 0.45228, -0.34403, 0.18765, -0.012344, -0.15518, 0.29295, 
                                 -0.3826, 0.40757, -0.35363, 0.21303, 0.0089236, -0.28839, 0.58256, -0.83672, 0.99783, -1.0306, 
                                 0.92987, -0.72404, 0.46729, -0.22252, 0.041291, 0.052129, -0.066364, 0.036284, -0.59585, 
                                 0.61697, -0.61828, 0.56601, -0.43945, 0.24301, -0.0082602, -0.21518, 0.37648, -0.44134, 0.40388, 
                                 -0.2881, 0.13912, -0.0077296, -0.065208, 0.059091, 0.024386, -0.16666, 0.34153, -0.52347, 0.6919, 
                                 -0.83064, 0.92495, -0.95948, 0.91996, -0.79902, 0.60357, -0.35959, 0.11051, 0.09228, 
                                 0.21219, -0.12237, -0.0057864, 0.14683, -0.27649, 0.37814, -0.44619, 0.48528, -0.5057, 0.51701, 
                                 -0.5223, 0.51552, -0.4833, 0.41055, -0.28823, 0.12002, 0.074721, -0.26354, 0.4087, -0.47791, 
                                 0.45474, -0.34471, 0.17507, 0.012386, -0.17312, 0.2727, -0.29637, 0.25229, -0.16737, 0.077291};
        const amrex::Real bij[N1][N2] = {-0.41402, 0.74652, -0.94877, 1.0224, -1.0131, 0.98448, -0.98267, 1.0105, -1.0228, 
                            0.94685, -0.71905, 0.32246, 0.19326, -0.71908, 1.1203, -1.2839, 1.1601, -0.78252, 0.25659, 
                            0.2772, -0.69173, 0.91376, -0.94143, 0.83334, -0.67596, 0.54425, -0.47241, 0.44621, -0.41833, 
                            0.3381, -2.7207, 4.7454, -5.5677, 5.0056, -3.2415, 0.76033, 1.7967, -3.8139, 
                            4.8662, -4.8202, 3.8452, -2.3377, 0.78741, 0.37099, -0.87468, 0.68735, 0.01924, -0.94324, 
                            1.7601, -2.2231, 2.2272, -1.8204, 1.1667, -0.47759, -0.060717, 0.34132, -0.3567, 0.18353, 
                            0.057724, -0.25098, 2.0376, -3.5838, 4.266, -3.9195, 2.6237, -0.67629, -1.4855, 
                            3.3973, -4.6827, 5.1408, -4.7836, 3.816, -2.5653, 1.3823, -0.54439, 0.18698, -0.28223, 
                            0.66773, -1.1128, 1.399, -1.3891, 1.0633, -0.51353, -0.097444, 0.5968, -0.8598, 0.84625, 
                            -0.60519, 0.24928, 0.08926, 0.55143, -0.94971, 1.1009, -1.0054, 0.75487, -0.49258, 
                            0.35303, -0.40639, 0.6299, -0.91783, 1.1259, -1.1317, 0.88645, -0.43775, -0.086628, 0.52606, 
                            -0.74715, 0.69253, -0.39968, -0.016537, 0.40953, -0.65593, 0.69818, -0.559, 0.32387, -0.10071, 
                            -0.025762, 0.026189, 0.066805, -0.17849, 0.79651, -1.1658, 0.83082, 0.2372, -1.8061, 
                            3.4589, -4.73, 5.2545, -4.8794, 3.7013, -2.0223, 0.24519, 1.2535, -2.2285, 2.6162, 
                            -2.521, 2.1494, -1.7223, 1.399, -1.2361, 1.1923, -1.168, 1.061, -0.81379, 0.43587, 
                            0.0029728, -0.4026, 0.67077, -0.75439, 0.65363, 1.7019, -3.3519, 4.8621, -6.0935, 
                            6.8741, -7.0463, 6.527, -5.3553, 3.706, -1.8605, 0.13993, 1.1764, -1.922, 2.0787, 
                            -1.7667, 1.194, -0.58529, 0.11434, 0.13764, -0.18687, 0.11841, -0.038835, 0.029727, -0.11871, 
                            0.27621, -0.43535, 0.52413, -0.49589, 0.34681, -0.11542, 0.94534, -1.5921, 1.7263, 
                            -1.278, 0.33761, 0.87355, -2.0695, 2.9802, -3.4237, 3.3475, -2.8317, 2.0549, -1.2364, 
                            0.57406, -0.19488, 0.13169, -0.3278, 0.66511, -1.0044, 1.2251, -1.2542, 1.0784, -0.74, 
                            0.31845, 0.09321, -0.41265, 0.5866, -0.60011, 0.47591, -0.26488, -4.6197, 8.0762, 
                            -9.5556, 8.827, -6.2846, 2.7913, 0.61753, -3.0638, 4.0784, -3.6975, 2.3832, -0.81126, 
                            -0.38695, 0.83531, -0.50666, -0.32046, 1.2104, -1.7574, 1.7379, -1.1736, 0.29387, 0.57721, 
                            -1.1561, 1.3025, -1.0531, 0.58149, -0.10993, -0.18634, 0.24184, -0.10933, -0.070304, 
                            -0.012146, 0.33331, -0.8721, 1.5029, -2.0399, 2.3067, -2.2037, 1.7474, -1.0673, 0.35982, 
                            0.18005, -0.42616, 0.36072, -0.072837, -0.28194, 0.54404, -0.60959, 0.46486, -0.18367, -0.10918, 
                            0.29198, -0.29549, 0.12813, 0.13174, -0.37162, 0.49289, -0.45092, 0.27122, -0.036107, 
                            -0.97141, 1.8294, -2.4611, 2.7634, -2.6646, 2.1532, -1.3004, 0.26317, 0.74115, -1.4854, 
                            1.7953, -1.6035, 0.97338, -0.08302, -0.82759, 1.5296, -1.873, 1.8262, -1.4743, 0.97864, 
                            -0.51389, 0.20756, -0.10279, 0.15699, -0.27316, 0.34873, -0.32092, 0.19046, -0.015619, -0.11861,
                            -2.6815, 4.6805, -5.5222, 5.0761, -3.5783, 1.5336, 0.46059, -1.9075, 2.552, 
                            -2.4269, 1.7974, -1.0338, 0.46605, -0.27341, 0.44635, -0.82391, 1.1829, -1.3372, 1.2078, 
                            -0.83894, 0.36341, 0.063899, -0.33087, 0.40556, -0.33436, 0.20722, -0.11013, 0.087425, -0.12989, 
                            0.19043, 1.736, -3.0353, 3.5742, -3.2241, 2.08, -0.42905, -1.3298, 2.7913, 
                            -3.6454, 3.7468, -3.137, 2.017, -0.68161, -0.56172, 1.4689, -1.9088, 1.8776, -1.4796, 
                            0.88282, -0.26608, -0.22728, 0.51847, -0.59948, 0.51904, -0.3555, 0.18677, -0.066524, 0.012703, 
                            -0.0099582, 0.023052, -1.0706, 1.8762, -2.233, 2.0941, -1.5606, 0.84691, -0.21014, 
                            -0.13059, 0.060922, 0.39793, -1.1022, 1.8365, -2.3835, 2.5904, -2.4095, 1.9026, -1.2112, 
                            0.5042, 0.07557, -0.44992, 0.61638, -0.63214, 0.58001, -0.53129, 0.51998, -0.5368, 0.54279, 
                            -0.49474, 0.37029, -0.18189, -0.6908, 1.2096, -1.4414, 1.3643, -1.0536, 0.65118, 
                            -0.31313, 0.15503, -0.21393, 0.44069, -0.72373, 0.93433, -0.97579, 0.81831, -0.50745, 0.14438, 
                            0.15332, -0.29504, 0.24854, -0.048558, -0.21907, 0.45065, -0.56221, 0.51751, -0.33749, 0.08904, 
                            0.14121, -0.2776, 0.27965, -0.15223, -0.1631, 0.36779, -0.63078, 0.92911, -1.2018, 
                            1.3682, -1.3565, 1.1329, -0.71983, 0.19561, 0.32403, -0.71876, 0.89928, -0.83412, 0.55876, 
                            -0.16374, -0.23399, 0.52712, -0.64938, 0.59225, -0.40207, 0.1595, 0.050784, -0.16933, 0.18005, 
                            -0.11161, 0.022509, 0.023729, 0.016118, -0.14852, -1.7134, 3.0842, -3.8625, 3.9534, 
                            -3.4298, 2.4939, -1.4056, 0.40309, 0.35635, -0.81824, 1.0153, -1.027, 0.93442, -0.79027, 
                            0.61239, -0.39849, 0.14975, 0.11138, -0.33963, 0.48239, -0.50394, 0.4056, -0.23052, 0.049289, 
                            0.068028, -0.081313, -0.0021784, 0.13058, -0.22967, 0.23528, 2.365, -4.157, 4.9907, 
                            -4.7877, 3.784, -2.4272, 1.2069, -0.48222, 0.37327, -0.75031, 1.3179, -1.7531, 1.8382, 
                            -1.5372, 0.9888, -0.42779, 0.073814, -0.036406, 0.27603, -0.63303, 0.90686, -0.94781, 0.72016, 
                            -0.31115, -0.11495, 0.39412, -0.43541, 0.25746, 0.025619, -0.26013, -0.027003, -0.086906, 
                            0.42022, -0.95187, 1.5644, -2.0861, 2.3551, -2.2807, 1.8763, -1.2547, 0.58555, -0.035926, 
                            -0.28512, 0.35575, -0.23614, 0.033916, 0.14343, -0.22908, 0.21503, -0.14328, 0.077078, -0.067062, 
                            0.12757, -0.2327, 0.33184, -0.37576, 0.3403, -0.23678, 0.10508, 0.006318, 0.4897, 
                            -0.77719, 0.73281, -0.34473, -0.27992, 0.9572, -1.4948, 1.7602, -1.722, 1.4517, -1.0863, 
                            0.76924, -0.59475, 0.5764, -0.65122, 0.7149, -0.67167, 0.47728, -0.15781, -0.20224, 0.49582, 
                            -0.63735, 0.59631, -0.40737, 0.15415, 0.065035, -0.17488, 0.14881, -0.013644, -0.16696, 
                            -0.46225, 0.61036, -0.24757, -0.63085, 1.8326, -3.0341, 3.8914, -4.1572, 3.7605, -2.8237, 
                            1.6141, -0.44979, -0.4031, 0.807, -0.77843, 0.45963, -0.052167, -0.25953, 0.36639, -0.25675, 
                            0.00010105, 0.29533, -0.53073, 0.65148, -0.65763, 0.59071, -0.50675, 0.44943, -0.43469, 0.45107,
                            0.059564, -0.086451, 0.064238, -0.0016142, -0.07036, 0.11175, -0.09241, 0.0076132, 0.11639, 
                            -0.23023, 0.28017, -0.23078, 0.082118, 0.1259, -0.32486, 0.44145, -0.42486, 0.26771, -0.012107, 
                            -0.26211, 0.46333, -0.51934, 0.40249, -0.1399, -0.19504, 0.50688, -0.7094, 0.75297, -0.63878, 
                            0.41554, 0.69346, -1.158, 1.2454, -0.93912, 0.35582, 0.30045, -0.81413, 1.0341, 
                            -0.92184, 0.55529, -0.09046, -0.3021, 0.49969, -0.46529, 0.24897, 0.043709, -0.30002, 0.44398, 
                            -0.45851, 0.37972, -0.26944, 0.18094, -0.13422, 0.11128, -0.071814, -0.019979, 0.17138, -0.35195, 
                            0.50379, -0.56656, 0.25841, -0.47206, 0.60058, -0.61408, 0.50109, -0.27598, -0.018176, 
                            0.31492, -0.53902, 0.6275, -0.55064, 0.32492, -0.012057, -0.29778, 0.51385, -0.57482, 0.47015, 
                            -0.24432, -0.018092, 0.22205, -0.29574, 0.21616, -0.017161, -0.22323, 0.41145, -0.47256, 0.37724, 
                            -0.152, -0.1309, 0.37962, 0.18874, -0.32631, 0.37883, -0.34091, 0.23692, -0.11191, 
                            0.015517, 0.015533, 0.029718, -0.13248, 0.25025, -0.33064, 0.32825, -0.21929, 0.0094315, 0.26697, 
                            -0.55575, 0.79681, -0.93903, 0.95235, -0.83408, 0.60869, -0.32136, 0.027329, 0.22044, -0.38251, 
                            0.4409, -0.40179, 0.29269, -0.15448, -0.17807, 0.33661, -0.46392, 0.55934, -0.63003, 
                            0.68278, -0.71572, 0.71493, -0.65927, 0.53212, -0.33503, 0.096224, 0.13154, -0.28518, 0.31314, 
                            -0.19678, -0.037984, 0.32459, -0.5752, 0.70921, -0.68039, 0.49252, -0.19734, -0.12408, 0.38957, 
                            -0.54279, 0.569, -0.49462, 0.37185, -0.25577, -0.060062, 0.10862, -0.13348, 0.1231, 
                            -0.070417, -0.022051, 0.13862, -0.25132, 0.3264, -0.33523, 0.26562, -0.12907, -0.040074, 0.19418, 
                            -0.28797, 0.29448, -0.21541, 0.08131, 0.058839, -0.155, 0.17404, -0.11136, -0.007967, 0.13903, 
                            -0.23384, 0.25852, -0.20447, 0.089635, 0.04996, -0.17455, 0.24271, -0.40098, 0.42033, 
                            -0.2949, 0.06789, 0.18584, -0.38776, 0.48322, -0.45824, 0.33986, -0.18121, 0.03852, 0.050416, 
                            -0.077649, 0.062974, -0.040465, 0.040431, -0.074912, 0.13265, -0.18499, 0.1994, -0.15427, 0.048655, 
                            0.096858, -0.24781, 0.36836, -0.43318, 0.43417, -0.3802, 0.29109, 0.14064, -0.28299, 
                            0.42227, -0.54442, 0.62885, -0.6557, 0.61436, -0.50921, 0.35962, -0.19419, 0.041753, 0.076678, 
                            -0.15144, 0.18189, -0.17005, 0.1141, -0.0060151, -0.16438, 0.40012, -0.68675, 0.98655, -1.2418, 
                            1.3876, -1.372, 1.1743, -0.81686, 0.36328, 0.096828, -0.47195, 0.69393, 0.093043, 
                            -0.15063, 0.14881, -0.082213, -0.035973, 0.18038, -0.32307, 0.44193, -0.52455, 0.56668, -0.5673, 
                            0.52388, -0.43136, 0.28604, -0.092605, -0.12969, 0.34607, -0.51298, 0.59129, -0.56153, 0.43447, 
                            -0.25188, 0.075332, 0.033991, -0.037366, -0.065839, 0.23562, -0.40371, 0.49701, -0.46369, 
                            -0.11141, 0.21467, -0.3019, 0.36584, -0.40055, 0.40221, -0.36988, 0.30604, -0.21639, 0.10908, 
                            0.0067519, -0.12265, 0.23224, -0.33191, 0.42043, -0.49768, 0.56302, -0.61397, 0.64594, -0.65337, 
                            0.63194, -0.58117, 0.50612, -0.41747, 0.32934, -0.25549, 0.20503, -0.17932, 0.17145, -0.16862};
        const amrex::Real cij[N1][N2] = {4.5213, -4.6454, 4.6833, -4.453, 3.8157, -2.7397, 1.3284, 0.19709, -1.5577, 
                            2.4974, -2.859, 2.63, -1.943, 1.0323, -0.1618, -0.45222, 0.69717, -0.58405, 0.22704, 
                            0.2067, -0.55752, 0.72314, -0.6823, 0.48769, -0.23468, 0.020257, 0.091554, -0.086256, -0.0061241, 
                            0.13224, 0.22646, -0.030786, -0.1413, 0.13319, 0.15743, -0.72291, 1.433, -2.0724, 
                            2.4142, -2.3037, 1.718, -0.78013, -0.27794, 1.1908, -1.7444, 1.841, -1.5214, 0.9397, 
                            -0.30232, -0.20384, 0.46849, -0.48136, 0.31751, -0.094762, -0.077649, 0.13866, -0.090042, -0.015978, 
                            0.10744, -0.12679, 0.89075, -0.77368, 0.64907, -0.59116, 0.6532, -0.84093, 1.1029, 
                            -1.342, 1.4457, -1.3236, 0.94142, -0.33667, -0.38727, 1.0889, -1.6286, 1.9075, -1.893, 
                            1.6231, -1.1898, 0.70705, -0.27687, -0.036839, 0.21775, -0.28951, 0.29607, -0.27911, 0.26179, 
                            -0.24436, 0.21171, -0.1478, -1.3153, 0.60135, 0.2361, -0.82162, 0.87202, -0.31616, 
                            -0.66948, 1.7239, -2.4386, 2.5143, -1.8759, 0.70208, 0.64202, -1.7397, 2.2732, -2.1313, 
                            1.4365, -0.4839, -0.37845, 0.87967, -0.91612, 0.57001, -0.055498, -0.38078, 0.56116, -0.44012, 
                            0.1069, 0.26788, -0.51464, 0.53955, 3.0054, -2.8951, 2.7192, -2.4777, 2.1566, 
                            -1.7292, 1.1709, -0.48181, -0.29239, 1.0527, -1.6614, 1.9779, -1.9051, 1.4306, -0.64386, 
                            -0.27863, 1.1196, -1.6838, 1.8567, -1.637, 1.1331, -0.52245, -0.0091353, 0.32777, -0.38946, 
                            0.24351, -0.0026192, -0.20709, 0.29574, -0.24042, 8.6441, -7.8974, 6.8555, -5.7468, 
                            4.7696, -4.029, 3.5107, -3.1017, 2.6485, -2.028, 1.204, -0.24745, -0.68703, 1.4175, 
                            -1.8024, 1.7921, -1.4471, 0.91504, -0.3782, -0.0080304, 0.16321, -0.099202, -0.096867, 0.30476, 
                            -0.42045, 0.3933, -0.23828, 0.021153, 0.1747, -0.28472, -5.8534, 4.7184, -3.0354, 
                            1.0793, 0.83512, -2.4103, 3.4217, -3.7594, 3.4476, -2.6343, 1.5531, -0.46634, -0.39779, 
                            0.8967, -0.9998, 0.78367, -0.39817, 0.015116, 0.22472, -0.25007, 0.07272, 0.226, -0.52909, 
                            0.72551, -0.74569, 0.58008, -0.27679, -0.078629, 0.39286, -0.59331, -2.0939, 1.4442, 
                            -0.57463, -0.276, 0.90245, -1.2003, 1.1919, -1.0037, 0.8066, -0.74435, 0.87935, -1.1754, 
                            1.5215, -1.7835, 1.8608, -1.7242, 1.4204, -1.0465, 0.70525, -0.46402, 0.33377, -0.27516, 
                            0.22657, -0.139, 0.0012419, 0.156, -0.27762, 0.31401, -0.24835, 0.10831, 9.7295, 
                            -7.2292, 3.7914, -0.26807, -2.5457, 4.1369, -4.3939, 3.5856, -2.2207, 0.84653, 0.1349, 
                            -0.57186, 0.56003, -0.34837, 0.20235, -0.28438, 0.59733, -1.0062, 1.3192, -1.3856, 1.1663, 
                            -0.74753, 0.29528, 0.022922, -0.11329, -0.006997, 0.22522, -0.39199, 0.39488, -0.21281, 
                            -2.0764, 3.0158, -4.296, 5.5736, -6.5112, 6.8681, -6.5606, 5.6749, -4.4319, 3.1163, 
                            -1.9935, 1.2393, -0.90244, 0.90923, -1.1036, 1.3077, -1.381, 1.2598, -0.9658, 0.58474, 
                            -0.22591, -0.021388, 0.11869, -0.086691, -0.0096037, 0.091094, -0.097454, 0.0099528, 0.1437,
                            -0.30301, 7.3731, -5.622, 3.0961, -0.28948, -2.2716, 4.1425, -5.0497, 4.9358, -3.9527, 
                            2.4072, -0.67795, -0.87508, 1.9855, -2.5245, 2.5067, -2.062, 1.3854, -0.67892, 0.10301, 
                            0.25365, -0.38038, 0.32969, -0.18856, 0.046093, 0.03314, -0.023398, -0.062286, 0.18425, -0.29482, 
                            0.35656, -13.3818, 11.547, -8.8763, 5.8539, -2.991, 0.71515, 0.71345, -1.2376, 
                            0.98803, -0.22669, -0.73271, 1.603, -2.1819, 2.3798, -2.2149, 1.7846, -1.2248, 0.66974, 
                            -0.22199, -0.062779, 0.17677, -0.15022, 0.035847, 0.10775, -0.23011, 0.29834, -0.30111, 0.24743, 
                            -0.16109, 0.072352, 5.7062, -3.8273, 1.2507, 1.3661, -3.3942, 4.4077, -4.2884, 
                            3.2312, -1.6569, 0.065072, 1.119, -1.6564, 1.5346, -0.93272, 0.13258, 0.58591, -1.0297, 
                            1.133, -0.94766, 0.59811, -0.22299, -0.072429, 0.23885, -0.27898, 0.22634, -0.12108, -0.005642, 
                            0.13395, -0.24793, 0.32707, -0.69987, 1.3326, -2.0853, 2.6169, -2.6327, 1.9886, 
                            -0.74542, -0.84635, 2.4222, -3.6149, 4.1626, -3.9802, 3.1719, -1.9862, 0.73264, 0.31148, 
                            -0.97179, 1.2072, -1.0949, 0.78257, -0.42749, 0.14626, 0.010812, -0.056265, 0.040224, -0.017214, 
                            0.019462, -0.046122, 0.069949, -0.055689, 1.0585, -1.1408, 1.3079, -1.5845, 1.9728, 
                            -2.4394, 2.9148, -3.3086, 3.5344, -3.5369, 3.3104, -2.9015, 2.3955, -1.8911, 1.4713, 
                            -1.1817, 1.0227, -0.95657, 0.92603, -0.87684, 0.77577, -0.61854, 0.4264, -0.23435, 0.076615, 
                            0.024638, -0.063886, 0.049814, 0.001509, -0.073853, -5.9887, 4.2701, -1.9451, -0.35857, 
                            2.0599, -2.7967, 2.5183, -1.4734, 0.10177, 1.1244, -1.8547, 1.9564, -1.5258, 0.82047, 
                            -0.14416, -0.26889, 0.32795, -0.096811, -0.25481, 0.53347, -0.60231, 0.42857, -0.083849, -0.29733, 
                            0.5791, -0.67877, 0.59317, -0.38929, 0.16734, -0.014847, -2.5717, 1.4885, -0.056895, 
                            -1.2922, 2.1679, -2.3394, 1.7982, -0.74366, -0.4968, 1.5824, -2.265, 2.4522, -2.2099, 
                            1.712, -1.1616, 0.71631, -0.44512, 0.32692, -0.28488, 0.23624, -0.13426, -0.014592, 0.16212, 
                            -0.2495, 0.2411, -0.14437, 0.007463, 0.10335, -0.13478, 0.071145, 4.4421, -4.6738, 
                            4.9301, -5.0589, 4.9197, -4.4284, 3.5868, -2.4868, 1.2879, -0.17705, -0.68059, 1.1825, 
                            -1.3119, 1.1365, -0.78428, 0.40443, -0.12572, 0.024004, -0.10757, 0.32322, -0.57958, 0.77929, 
                            -0.84997, 0.76482, -0.54761, 0.26191, 0.010873, -0.19725, 0.2532, -0.17541, 0.023396, 
                            0.092963, -0.22598, 0.31222, -0.30648, 0.20205, -0.034895, -0.12999, 0.22448, -0.20459, 0.068271, 
                            0.14351, -0.36223, 0.51718, -0.56056, 0.4826, -0.31183, 0.10178, 0.089545, -0.2187, 0.26761, 
                            -0.2435, 0.17023, -0.076357, -0.014343, 0.086613, -0.13203, 0.14498, -0.12025, 0.05447, 
                            -1.4607, 1.1463, -0.73299, 0.34352, -0.080206, -0.010943, -0.046392, 0.1723, -0.26498, 0.24195, 
                            -0.071925, -0.21449, 0.53858, -0.80507, 0.93858, -0.91041, 0.74606, -0.51191, 0.28758, -0.13571, 
                            0.08122, -0.1069, 0.16575, -0.20333, 0.18041, -0.086854, -0.057752, 0.21535, -0.34643, 0.42511,
                            -3.8718, 2.6063, -0.93015, -0.66298, 1.7356, -2.0457, 1.6121, -0.68747, -0.34772, 
                            1.1258, -1.4152, 1.1834, -0.58215, -0.13151, 0.70231, -0.96923, 0.90981, -0.62552, 0.2814, 
                            -0.0299, -0.048459, -0.034548, 0.19661, -0.33401, 0.37324, -0.30191, 0.16734, -0.046826, 0.0059783, 
                            -0.065851, 0.26958, -0.40624, 0.56125, -0.65915, 0.64681, -0.5176, 0.31582, -0.11893, 
                            0.0047501, -0.017148, 0.14486, -0.32299, 0.45737, -0.46269, 0.29906, 0.0079164, -0.37235, 0.67746, 
                            -0.81817, 0.74081, -0.46434, 0.074835, 0.30485, -0.55875, 0.61833, -0.48475, 0.22511, 0.055216, 
                            -0.25264, 0.30255, 0.6386, -0.71205, 0.79787, -0.85607, 0.8544, -0.78014, 0.64405, 
                            -0.4753, 0.30973, -0.17676, 0.090157, -0.046075, 0.028567, -0.019259, 0.0064324, 0.010744, -0.024541, 
                            0.025998, -0.013145, -0.0045172, 0.0082097, 0.021568, -0.093761, 0.19821, -0.30467, 0.37129, -0.36026, 
                            0.2548, -0.070403, -0.14531, 0.13188, 0.30668, -0.87139, 1.3779, -1.6715, 1.6803, 
                            -1.4342, 1.0454, -0.65856, 0.39339, -0.302, 0.35743, -0.47527, 0.55701, -0.53492, 0.39947, 
                            -0.19843, 0.010305, 0.094686, -0.087531, -0.0073314, 0.12535, -0.19386, 0.16743, -0.050225, -0.10511, 
                            0.22146, -0.23336, 0.11888, 0.087285, -0.46665, 0.42249, -0.37211, 0.33829, -0.33466, 
                            0.35834, -0.39004, 0.40173, -0.36857, 0.27947, -0.14203, -0.020523, 0.1784, -0.30621, 0.39078, 
                            -0.43269, 0.44136, -0.42708, 0.39416, -0.3391, 0.25469, -0.1378, -0.0036028, 0.14823, -0.26633, 
                            0.3299, -0.32414, 0.25459, -0.14652, 0.036057, 0.93542, -0.92012, 0.9048, -0.89736, 
                            0.898, -0.8957, 0.87003, -0.79834, 0.6656, -0.47294, 0.24099, -0.0062166, -0.18889, 0.30843, 
                            -0.33401, 0.27015, -0.14238, -0.010955, 0.15016, -0.24493, 0.28098, -0.26122, 0.20185, -0.12553, 
                            0.054284, -0.0042004, -0.017166, 0.010751, 0.015793, -0.050716, 0.92453, -0.8339, 0.68174, 
                            -0.47288, 0.22328, 0.037792, -0.27107, 0.43596, -0.50183, 0.45787, -0.3176, 0.11602, 0.099868, 
                            -0.28396, 0.40309, -0.44415, 0.41458, -0.33666, 0.23829, -0.14393, 0.068583, -0.01612, -0.018325, 
                            0.043881, -0.069425, 0.10062, -0.13892, 0.18211, -0.2254, 0.2624, 0.94584, -0.76506, 
                            0.51927, -0.26947, 0.066575, 0.06436, -0.12752, 0.1468, -0.14877, 0.14694, -0.13511, 0.093052, 
                            -0.001551, -0.14107, 0.30985, -0.45734, 0.53057, -0.49415, 0.34925, -0.13916, -0.062454, 0.1771, 
                            -0.1512, -0.021977, 0.29756, -0.5938, 0.82101, -0.91332, 0.85109, -0.66533, -0.13293, 
                            0.27845, -0.45118, 0.57556, -0.59244, 0.48313, -0.27807, 0.046734, 0.12733, -0.17697, 0.075926, 
                            0.15161, -0.43954, 0.70304, -0.86734, 0.89169, -0.7802, 0.57658, -0.34601, 0.15164, -0.034853, 
                            0.0057992, -0.046409, 0.12297, -0.20194, 0.26229, -0.29977, 0.32265, -0.34229, 0.36366, 
                            -0.75764, 0.74445, -0.69972, 0.60476, -0.456, 0.27267, -0.093451, -0.037579, 0.089895, -0.06199, 
                            -0.014441, 0.084814, -0.093436, 0.0083154, 0.16149, -0.36417, 0.5213, -0.55658, 0.4266, -0.14127, 
                            -0.23467, 0.60065, -0.85351, 0.92246, -0.79316, 0.51141, -0.16567, -0.14496, 0.34482, -0.40504};
        const amrex::Real dij[N1][N2] = {-0.98925, 1.6609, -1.7915, 1.3165, -0.34516, -0.87783, 2.0499, -2.902, 3.2747, 
                            -3.1554, 2.6672, -2.0179, 1.4265, -1.0542, 0.96184, -1.104, 1.359, -1.5805, 1.6497, 
                            -1.5125, 1.1883, -0.7525, 0.30334, 0.074478, -0.33391, 0.47119, -0.51393, 0.4998, -0.45657, 
                            0.39231, 1.2138, -2.1816, 2.7364, -2.8398, 2.5861, -2.1585, 1.7579, -1.5294, 
                            1.5165, -1.656, 1.8142, -1.8478, 1.6628, -1.2504, 0.6867, -0.099298, -0.38323, 0.67739, 
                            -0.7687, 0.706, -0.57154, 0.44193, -0.3573, 0.31138, -0.26463, 0.17269, -0.01546, -0.18677, 
                            0.37787, -0.48874, 0.39912, -0.65602, 0.68011, -0.46587, 0.096203, 0.28564, -0.52589, 
                            0.51469, -0.22615, -0.26972, 0.82751, -1.2723, 1.4554, -1.3014, 0.83041, -0.15063, -0.57759, 
                            1.191, -1.5705, 1.67, -1.5204, 1.2081, -0.83992, 0.50625, -0.25706, 0.096197, 0.0058019, 
                            -0.08845, 0.17833, -0.27593, -2.5073, 4.2852, -4.8416, 4.0749, -2.2922, 0.088462, 
                            1.866, -3.0509, 3.2549, -2.6157, 1.5353, -0.50987, -0.057028, -0.010142, 0.62089, -1.4825, 
                            2.2324, -2.5824, 2.4193, -1.8281, 1.037, -0.31386, -0.13994, 0.25657, -0.10734, -0.14797, 
                            0.34086, -0.36687, 0.22159, 0.011089, 1.1204, -1.9271, 2.2022, -1.8869, 1.0912, 
                            -0.049508, -0.961, 1.7085, -2.0716, 2.0599, -1.7891, 1.4234, -1.1095, 0.92839, -0.87932, 
                            0.89767, -0.89555, 0.80541, -0.60891, 0.34111, -0.071297, -0.1288, 0.21466, -0.18426, 0.074401, 
                            0.058329, -0.16182, 0.2072, -0.19485, 0.14684, 1.646, -2.9515, 3.6678, -3.7004, 
                            3.1221, -2.1369, 1.0073, 0.026094, -0.80764, 1.2921, -1.5295, 1.6213, -1.6663, 1.7207, 
                            -1.7835, 1.8098, -1.7434, 1.5496, -1.2366, 0.85443, -0.47522, 0.16465, 0.042038, -0.14912, 
                            0.19134, -0.2123, 0.24098, -0.27775, 0.29614, -0.25928, 4.0309, -7.2521, 9.0511, 
                            -9.1558, 7.6867, -5.1066, 2.0855, 0.6777, -2.6266, 3.4668, -3.2057, 2.1111, -0.60779, 
                            -0.85231, 1.9081, -2.3659, 2.2192, -1.6164, 0.79296, 0.0079093, -0.60105, 0.8971, -0.90629, 
                            0.71371, -0.43835, 0.19069, -0.041321, 0.007905, -0.061033, 0.14414, 0.96581, -1.9983, 
                            3.0966, -4.1574, 4.9891, -5.3744, 5.1549, -4.3052, 2.964, -1.4075, -0.026894, 1.0407, 
                            -1.4619, 1.289, -0.67836, -0.11855, 0.84257, -1.3066, 1.4413, -1.2945, 0.99096, -0.67298, 
                            0.44548, -0.34634, 0.34829, -0.38619, 0.39429, -0.33646, 0.218, -0.077175, -0.86419, 
                            2.0635, -3.7535, 5.8067, -7.829, 9.2925, -9.7348, 8.9449, -7.063, 4.553, -2.0569, 
                            0.18466, 0.68274, -0.50523, -0.42669, 1.6157, -2.5444, 2.8535, -2.4488, 1.5034, -0.36407, 
                            -0.59474, 1.1094, -1.1085, 0.71204, -0.15875, -0.30161, 0.50554, -0.42538, 0.15791, 
                            1.5509, -2.8728, 3.7862, -4.1987, 4.1191, -3.6476, 2.944, -2.1844, 1.5195, -1.0432, 
                            0.78092, -0.69768, 0.72046, -0.76745, 0.77398, -0.70814, 0.57303, -0.39753, 0.22057, -0.075767, 
                            -0.018613, 0.061767, -0.065656, 0.046927, -0.019602, -0.0084579, 0.034606, -0.057559, 0.07353, 
                            -0.074941, 0.0061778, 0.11018, -0.42468, 0.93486, -1.5553, 2.1407, -2.529, 2.5913, -2.2712, 
                            1.6034, -0.70354, -0.26272, 1.1247, -1.7488, 2.067, -2.0841, 1.8637, -1.5012, 1.0919, 
                            -0.70625, 0.37857, -0.11025, -0.11574, 0.31655, -0.49503, 0.63463, -0.70513, 0.67643, -0.53446, 
                            0.29281, -2.0545, 3.6464, -4.437, 4.2982, -3.3376, 1.8575, -0.25983, -1.0683, 
                            1.857, -2.0125, 1.6202, -0.89596, 0.10557, 0.51874, -0.84015, 0.84055, -0.60363, 0.26893, 
                            0.024338, -0.18372, 0.18645, -0.074535, -0.072207, 0.1728, -0.17727, 0.083344, 0.066478, -0.2047, 
                            0.26678, -0.21668, 0.75348, -1.2937, 1.4917, -1.3529, 1.0124, -0.67726, 0.53974, 
                            -0.69584, 1.103, -1.5945, 1.9446, -1.9594, 1.5578, -0.809, -0.087289, 0.87059, -1.3133, 
                            1.3021, -0.87613, 0.20965, 0.45403, -0.89067, 0.97207, -0.70403, 0.21361, 0.30664, -0.67397, 
                            0.7809, -0.62743, 0.31046, -0.55957, 1.0901, -1.541, 1.8335, -1.8747, 1.5909, 
                            -0.9663, 0.070187, 0.94298, -1.8645, 2.4867, -2.6648, 2.3638, -1.6722, 0.77784, 0.088638, 
                            -0.72243, 1.0033, -0.92452, 0.58421, -0.14333, -0.23287, 0.42925, -0.41277, 0.23305, 0.0057057, 
                            -0.18892, 0.23467, -0.12048, -0.11404, 0.62258, -1.1196, 1.4012, -1.4369, 1.2592, 
                            -0.94739, 0.59773, -0.29252, 0.077898, 0.04183, -0.093686, 0.11544, -0.13467, 0.15643, -0.16411, 
                            0.13192, -0.04262, -0.098451, 0.25976, -0.39273, 0.45014, -0.40615, 0.26926, -0.082519, -0.08997, 
                            0.18536, -0.16475, 0.027638, 0.18746, -0.41636, -2.519, 4.5125, -5.6109, 5.7033, 
                            -4.9514, 3.7163, -2.4241, 1.4235, -0.88475, 0.77257, -0.89694, 1.0149, -0.94062, 0.61924, 
                            -0.13962, -0.31582, 0.55849, -0.48014, 0.10256, 0.42901, -0.90413, 1.1319, -1.0171, 0.59667, 
                            -0.024211, -0.49156, 0.76743, -0.71409, 0.36604, 0.13673, -1.0329, 1.7957, -2.1104, 
                            1.9493, -1.4373, 0.79963, -0.27604, 0.034737, -0.11857, 0.44171, -0.83501, 1.1194, -1.1769, 
                            0.99157, -0.64673, 0.28266, -0.034829, -0.021018, -0.10508, 0.32849, -0.53107, 0.6131, -0.53356, 
                            0.32297, -0.065291, -0.14107, 0.22545, -0.17203, 0.021725, 0.15031, 0.063607, -0.1398, 
                            0.23523, -0.34682, 0.46153, -0.55977, 0.62112, -0.63042, 0.58214, -0.48156, 0.34276, -0.18439, 
                            0.024964, 0.12057, -0.24203, 0.33309, -0.38937, 0.40693, -0.38252, 0.3156, -0.21142, 0.083241, 
                            0.04778, -0.15619, 0.21869, -0.22157, 0.16642, -0.071572, -0.031855, 0.10877, 0.5505, 
                            -0.96803, 1.1599, -1.0996, 0.83029, -0.44459, 0.051023, 0.26125, -0.44596, 0.50467, -0.4739, 
                            0.40218, -0.32778, 0.26613, -0.21076, 0.14506, -0.057544, -0.047472, 0.14893, -0.21795, 0.23165, 
                            -0.18487, 0.093849, 0.010045, -0.093554, 0.13563, -0.13577, 0.11291, -0.095493, 0.10744, 
                            0.10018, -0.20416, 0.30162, -0.36283, 0.34653, -0.21867, -0.026315, 0.35232, -0.68445, 0.92946, 
                            -1.0072, 0.88124, -0.57644, 0.17435, 0.21205, -0.47636, 0.55517, -0.44899, 0.21977, 0.034039, 
                            -0.21518, 0.26347, -0.17637, 0.0066805, 0.16086, -0.24435, 0.19702, -0.024676, -0.2179, 0.44929,
                            -1.2635, 2.0994, -2.2304, 1.6247, -0.50191, -0.75111, 1.7207, -2.1109, 1.8384, 
                            -1.0469, 0.039694, 0.83925, -1.3288, 1.3326, -0.93307, 0.33848, 0.2098, -0.53144, 0.56582, 
                            -0.37684, 0.10826, 0.08687, -0.11125, -0.043063, 0.3025, -0.55329, 0.69499, -0.68213, 0.53763, 
                            -0.33529, 0.18112, -0.43017, 0.77861, -1.2005, 1.6159, -1.9186, 2.0162, -1.8672, 
                            1.5007, -1.0089, 0.51676, -0.13923, -0.05678, 0.071744, 0.032979, -0.16396, 0.23477, -0.19945, 
                            0.067453, 0.10516, -0.24354, 0.28856, -0.22326, 0.080153, 0.073215, -0.16421, 0.14745, -0.025732, 
                            -0.14948, 0.29846, -0.070186, 0.15624, -0.27269, 0.42961, -0.62727, 0.85048, -1.0658, 
                            1.2248, -1.2751, 1.1764, -0.91757, 0.52724, -0.073163, -0.35195, 0.65492, -0.76975, 0.679, 
                            -0.42108, 0.080033, 0.2396, -0.44478, 0.4823, -0.35374, 0.1123, 0.15713, -0.36747, 0.45803, 
                            -0.4125, 0.26083, -0.065229, 0.5688, -1.0004, 1.2062, -1.1755, 0.97247, -0.70515, 
                            0.47841, -0.35256, 0.32448, -0.33844, 0.32031, -0.21888, 0.034684, 0.17701, -0.33071, 0.35176, 
                            -0.21507, -0.0366, 0.30437, -0.47135, 0.45163, -0.22946, -0.12882, 0.49605, -0.73147, 0.73514, 
                            -0.48801, 0.061487, 0.40755, -0.76639, -0.12872, 0.19821, -0.16992, 0.039009, 0.16485, 
                            -0.38872, 0.57491, -0.67945, 0.6841, -0.59824, 0.45175, -0.28267, 0.12553, -0.0042151, -0.069222, 
                            0.091455, -0.063888, -0.0092949, 0.12003, -0.25362, 0.3873, -0.49258, 0.54201, -0.51833, 0.42212, 
                            -0.27392, 0.10914, 0.033219, -0.12364, 0.15183, -0.15729, 0.31329, -0.46021, 0.58116, 
                            -0.65329, 0.65592, -0.58024, 0.43624, -0.25301, 0.071698, 0.06696, -0.13604, 0.13155, -0.07372, 
                            -0.000295, 0.04981, -0.045249, -0.021131, 0.13218, -0.25134, 0.33464, -0.34501, 0.2642, -0.098861, 
                            -0.12094, 0.34967, -0.53825, 0.64653, -0.65304, 0.55986, 0.12039, -0.24403, 0.36909, 
                            -0.48607, 0.57924, -0.63138, 0.63007, -0.57266, 0.46787, -0.33347, 0.19129, -0.061669, -0.040201, 
                            0.10494, -0.12718, 0.10299, -0.028786, -0.097007, 0.26993, -0.47497, 0.68443, -0.86024, 0.9615, 
                            -0.95518, 0.82684, -0.58724, 0.27217, 0.065153, -0.36682, 0.58442, 0.15774, -0.24886, 
                            0.23478, -0.12124, -0.043714, 0.18918, -0.24988, 0.19185, -0.024949, -0.20236, 0.42293, -0.57662, 
                            0.6309, -0.58839, 0.47962, -0.3457, 0.21974, -0.11556, 0.028209, 0.055319, -0.14166, 0.22129, 
                            -0.26901, 0.25534, -0.16345, 0.0032676, 0.18496, -0.34103, 0.40583, -0.34491, 0.042578, 
                            -0.061113, 0.045791, -0.0083374, -0.021402, 0.0086102, 0.069158, -0.20815, 0.37468, -0.51415, 0.56989, 
                            -0.50485, 0.31742, -0.044669, -0.24883, 0.49267, -0.63472, 0.65834, -0.58615, 0.46882, -0.36362, 
                            0.31106, -0.31904, 0.36075, -0.38703, 0.34814, -0.2163, -0.0002191, 0.25704, -0.48786, 
                            0.1334, -0.24638, 0.32659, -0.37335, 0.39485, -0.40042, 0.39226, -0.36176, 0.29365, -0.17679, 
                            0.017105, 0.15472, -0.28633, 0.31923, -0.21245, -0.034573, 0.37033, -0.69806, 0.90185, -0.88473, 
                            0.60596, -0.10318, -0.51058, 1.0762, -1.4359, 1.4833, -1.1982, 0.65445, 0.0031634, -0.60506};

        amrex::Real phi;

        phi = a0;
        for (int i = 1; i <= N1; ++i)
        {
            phi += ai0[i-1]*std::cos(i*2.0*M_PI*x[0]);
            phi += bi0[i-1]*std::sin(i*2.0*M_PI*x[0]);
        }
        for (int j = 1; j <= N2; ++j)
        {
            phi += a0j[j-1]*std::cos(j*2.0*M_PI*x[1]);
            phi += b0j[j-1]*std::sin(j*2.0*M_PI*x[1]);
        }

        for (int i = 1; i <= N1; ++i)
        for (int j = 1; j <= N2; ++j)
        {
            phi += aij[i-1][j-1]*std::cos(i*2.0*M_PI*x[0])*std::cos(j*2.0*M_PI*x[1]);
            phi += bij[i-1][j-1]*std::cos(i*2.0*M_PI*x[0])*std::sin(j*2.0*M_PI*x[1]);
            phi += cij[i-1][j-1]*std::sin(i*2.0*M_PI*x[0])*std::cos(j*2.0*M_PI*x[1]);
            phi += dij[i-1][j-1]*std::sin(i*2.0*M_PI*x[0])*std::sin(j*2.0*M_PI*x[1]);
        }

        const amrex::Real PHI[N_PHI] =
        {
            phi-150.0
        };
#else
        amrex::Print() << "ERROR: IBVP_Linear_Advection.H - LINADV::F_PHI" << std::endl;
        amrex::Print() << "| Unexpected distance function(s)." << std::endl;
        exit(-1);
#endif

        return PHI[ph];
    }
    // ================================================================

    // RELATIONSHIP AMONG DISTANCE FUNCTIONS AND DOMAINS ==============
    AMREX_GPU_HOST_DEVICE
    void F_DOM2PHI(const int & dom, int * phi_info) const
    {
#if (PHI_TYPE == PHI_TYPE_ONE_PHASE)
        const int PHI_INFO[2*N_DOM] =
        {
            // dom = 0
            0, -1,
        };

#elif ((PHI_TYPE == PHI_TYPE_TWO_PHASES_PERIODIC) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_NI_SUPER_ALLOY) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_PARTICLES) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_WOVEN_COMPOSITE) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_AMREX))

        const int PHI_INFO[2*N_DOM] =
        {
            // dom = 0
            0, -1,

            // dom = 1
            0, +1
        };

#else
        amrex::Print() << "ERROR: IBVP_Linear_Advection.H - LINADV::F_DOM2PHI" << std::endl;
        amrex::Print() << "| Unexpected distance function(s) - domain(s) relationships." << std::endl;
        exit(-1);
#endif

        phi_info[0] = PHI_INFO[2*dom];
        phi_info[1] = PHI_INFO[2*dom+1];
    }
    // ================================================================

    // INITIAL CONDITIONS: UNKNOWN FIELDS =============================
    AMREX_GPU_HOST_DEVICE
    amrex::Real F_U0(const int & u, const amrex::Real * x) const
    {
        const amrex::Real xc[AMREX_SPACEDIM] = {AMREX_D_DECL(0.25, 0.5, 0.5)};
#if (AMREX_SPACEDIM == 2)
        //amrex::Real r2 = 100.0*((x[0]-xc[0])*(x[0]-xc[0])+(x[1]-xc[1])*(x[1]-xc[1]));
        //amrex::Real phi0 = std::exp(-r2);
        amrex::Real rho0 = std::sin(2.0*M_PI*x[0])*std::sin(2.0*M_PI*x[1]);
#endif
#if (AMREX_SPACEDIM == 3)
        //amrex::Real r2 = 100.0*((x[0]-xc[0])*(x[0]-xc[0])+(x[1]-xc[1])*(x[1]-xc[1])+(x[2]-xc[2])*(x[2]-xc[2]));
        //amrex::Real phi0 = std::exp(-r2);
        amrex::Real rho0 = std::sin(2.0*M_PI*x[0])*std::sin(2.0*M_PI*x[1])*std::sin(2.0*M_PI*x[2]);
#endif

        return rho0;
    }
    // ================================================================
    // RELATIONSHIP AMONG UNKNOWN FIELDS AND DOMAINS ==================
    AMREX_GPU_HOST_DEVICE
    int F_U2DOM(const int & u) const
    {
#if (PHI_TYPE == PHI_TYPE_ONE_PHASE)

        const int DOM[N_U] =
        {
            // sol = 0
            0,
        };

#elif ((PHI_TYPE == PHI_TYPE_TWO_PHASES_PERIODIC) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_NI_SUPER_ALLOY) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_PARTICLES) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_WOVEN_COMPOSITE) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_AMREX))

        const int DOM[N_U] =
        {
            // sol = 0
            0,

            // sol = 1
            1
        };

#else
        amrex::Print() << "ERROR: IBVP_Linear_Advection.H - LINADV::F_U2DOM" << std::endl;
        amrex::Print() << "| Unexpected unknown field(s) - domain(s) relationships." << std::endl;
        exit(-1);
#endif

        return DOM[u];
    }
    // ================================================================

    // EXACT SOLUTION/ERROR EVALUATION ================================
    AMREX_GPU_HOST_DEVICE
    void F_EXACT(const amrex::Real & t, const amrex::Real * x,
                 amrex::Real * U) const
    {
        amrex::Real a[AMREX_SPACEDIM];
        this->F_a(t, x, a);
        const amrex::Real y[AMREX_SPACEDIM] = {AMREX_D_DECL(x[0]-a[0]*t, x[1]-a[1]*t, x[2]-a[2]*t)};
        
        U[0] = this->F_U0(0, y);
        U[1] = this->F_U0(0, y);
    }

    AMREX_GPU_HOST_DEVICE
    void F_ERROR(const amrex::Real & t, const amrex::Real * x,
                 const amrex::Real * U,
                 amrex::Real & err_x,
                 amrex::Real & norm_x) const
    {
        const int ph = 0;
        const amrex::Real PHI = this->F_PHI(ph, t, x);

        amrex::Real Ue[N_U];

        this->F_EXACT(t, x, Ue);

        norm_x = Ue[0]*Ue[0];

        Ue[0] -= ((PHI < 0.0) ? U[0] : U[1]);
        err_x = Ue[0]*Ue[0];
    }
    // ================================================================

    // BOUNDARY CONDITIONS ============================================
    AMREX_GPU_HOST_DEVICE
    int F_DOM2NBRDOM(const int& dom) const
    {
#if (PHI_TYPE == PHI_TYPE_ONE_PHASE)

        const int NBRDOM[N_DOM] =
        {
            // dom = 0
            -1,
        };

#elif ((PHI_TYPE == PHI_TYPE_TWO_PHASES_PERIODIC) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_NI_SUPER_ALLOY) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_PARTICLES) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_WOVEN_COMPOSITE) || \
       (PHI_TYPE == PHI_TYPE_TWO_PHASES_AMREX))

        const int NBRDOM[N_DOM] =
        {
            // dom = 0
            1,

            // dom = 1
            0
        };

#else
        amrex::Print() << "ERROR: IBVP_Linear_Advection.H - LINADV::F_DOM2NBRDOM" << std::endl;
        amrex::Print() << "| Unexpected neighboring domain(s) relationships." << std::endl;
        exit(-1);
#endif
        
        return NBRDOM[dom];
    }
    // ================================================================

    // PDES SYSTEM ====================================================
    AMREX_GPU_HOST_DEVICE
    void F_a(const amrex::Real & t, const amrex::Real * x,
             amrex::Real * a) const
    {
#if (VELOCITY_FIELD == CONSTANT_VELOCITY)
#if (AMREX_SPACEDIM == 2)
        a[0] = std::sqrt(2.0)/2.0;
        a[1] = std::sqrt(2.0)/2.0;
#endif
#if (AMREX_SPACEDIM == 3)
        a[0] = std::sqrt(3.0)/3.0;
        a[1] = std::sqrt(3.0)/3.0;
        a[2] = std::sqrt(3.0)/3.0;
#endif
#endif
#if (VELOCITY_FIELD == SINGLE_VORTEX)
        const amrex::Real ct = -std::cos(0.5*M_PI*t);
        const amrex::Real sx = std::sin(M_PI*x[0]);
        const amrex::Real sy = std::sin(M_PI*x[1]);
        const amrex::Real s2x = std::sin(2.0*M_PI*x[0]);
        const amrex::Real s2y = std::sin(2.0*M_PI*x[1]);
        AMREX_D_TERM
        (
            a[0] = -ct*sx*sx*s2y;,
            a[1] = +ct*s2x*sy*sy;,
            a[2] = 1.0;
        )
#endif
    }

    AMREX_GPU_HOST_DEVICE
    amrex::Real F_am(const amrex::Real & t, const amrex::Real * x) const
    {
        amrex::Real am, a[AMREX_SPACEDIM];
        this->F_a(t, x, a);

        am = std::sqrt(AMREX_D_PICK(a[0]*a[0], a[0]*a[0]+a[1]*a[1], a[0]*a[0]+a[1]*a[1]+a[2]*a[2]));
        return am;
    }

    AMREX_GPU_HOST_DEVICE
    amrex::Real F_DT(const amrex::Real * dx,
                     const amrex::Real & t, const amrex::Real * x,
                     const amrex::Real * U) const
    {
        amrex::Real dt;
        const amrex::Real am = this->F_am(t, x);

#if (AMREX_SPACEDIM == 2)
        const amrex::Real h = std::min(dx[0], dx[1]);
        dt = 0.3*h/am;
#endif
#if (AMREX_SPACEDIM == 3)
        const amrex::Real h = std::min(dx[0], std::min(dx[1], dx[2]));
        dt = 0.25*h/am;
#endif
        
        return dt;
    }

    AMREX_GPU_HOST_DEVICE
    void F_F(const amrex::Real & t, const amrex::Real * x,
             const amrex::Real * U,
             AMREX_D_DECL(amrex::Real * F1, amrex::Real * F2, amrex::Real * F3)) const
    {
        amrex::Real a[AMREX_SPACEDIM];
        this->F_a(t, x, a);

        AMREX_D_TERM
        (
            F1[0] = a[0]*U[0];,
            F2[0] = a[1]*U[0];,
            F3[0] = a[2]*U[0];
        )
        AMREX_D_TERM
        (
            F1[1] = a[0]*U[1];,
            F2[1] = a[1]*U[1];,
            F3[1] = a[2]*U[1];
        )
    }
    // ================================================================

    // DG-RELATED AUXILIARY FUNCTIONS: NUMERICAL FLUX =================
    AMREX_GPU_HOST_DEVICE
    void F_NF_BASE(const amrex::Real & t, const amrex::Real * x, const amrex::Real * un,
                   const amrex::Real * U, const amrex::Real * nbr_U,
                   AMREX_D_DECL(const amrex::Real * F1, const amrex::Real * F2, const amrex::Real * F3),
                   AMREX_D_DECL(const amrex::Real * nbr_F1, const amrex::Real * nbr_F2, const amrex::Real * nbr_F3),
                   AMREX_D_DECL(amrex::Real * NF1, amrex::Real * NF2, amrex::Real * NF3)) const
    {
#if (DG_NUM_FLUX == DG_NUM_FLUX_LF)
        const amrex::Real mu = this->F_am(t, x);
#endif
#if (DG_NUM_FLUX == DG_NUM_FLUX_UPW)
        amrex::Real a[AMREX_SPACEDIM];
        this->F_a(t, x, a);
        const amrex::Real a_dot_un = AMREX_D_PICK(a[0]*un[0], a[0]*un[0]+a[1]*un[1], a[0]*un[0]+a[1]*un[1]+a[2]*un[2]);
        const amrex::Real mu = std::abs(a_dot_un);
#endif

        // dom = 0
        AMREX_D_TERM
        (
            NF1[0] = 0.5*(F1[0]+nbr_F1[0])+0.5*mu*(U[0]-nbr_U[0])*un[0];,
            NF2[0] = 0.5*(F2[0]+nbr_F2[0])+0.5*mu*(U[0]-nbr_U[0])*un[1];,
            NF3[0] = 0.5*(F3[0]+nbr_F3[0])+0.5*mu*(U[0]-nbr_U[0])*un[2];
        )

        // dom = 1
        AMREX_D_TERM
        (
            NF1[1] = 0.5*(F1[1]+nbr_F1[1])+0.5*mu*(U[1]-nbr_U[1])*un[0];,
            NF2[1] = 0.5*(F2[1]+nbr_F2[1])+0.5*mu*(U[1]-nbr_U[1])*un[1];,
            NF3[1] = 0.5*(F3[1]+nbr_F3[1])+0.5*mu*(U[1]-nbr_U[1])*un[2];
        )
    }

    AMREX_GPU_HOST_DEVICE
    void F_NF_PHI_BASE(const amrex::Real & t, const amrex::Real * x, const amrex::Real * un,
                       const amrex::Real * U, const amrex::Real * nbr_U,
                       AMREX_D_DECL(const amrex::Real * F1, const amrex::Real * F2, const amrex::Real * F3),
                       AMREX_D_DECL(const amrex::Real * nbr_F1, const amrex::Real * nbr_F2, const amrex::Real * nbr_F3),
                       AMREX_D_DECL(amrex::Real * NF1, amrex::Real * NF2, amrex::Real * NF3)) const
    {
#if (DG_NUM_FLUX == DG_NUM_FLUX_LF)
        const amrex::Real mu = this->F_am(t, x);
#endif
#if (DG_NUM_FLUX == DG_NUM_FLUX_UPW)
        amrex::Real a[AMREX_SPACEDIM];
        this->F_a(t, x, a);
        const amrex::Real a_dot_un = AMREX_D_PICK(a[0]*un[0], a[0]*un[0]+a[1]*un[1], a[0]*un[0]+a[1]*un[1]+a[2]*un[2]);
        const amrex::Real mu = std::abs(a_dot_un);
#endif

        // dom = 0
        AMREX_D_TERM
        (
            NF1[0] = 0.5*(F1[0]+nbr_F1[1])+0.5*mu*(U[0]-nbr_U[1])*un[0];,
            NF2[0] = 0.5*(F2[0]+nbr_F2[1])+0.5*mu*(U[0]-nbr_U[1])*un[1];,
            NF3[0] = 0.5*(F3[0]+nbr_F3[1])+0.5*mu*(U[0]-nbr_U[1])*un[2];
        )

        // dom = 1
        AMREX_D_TERM
        (
            NF1[1] = 0.5*(F1[1]+nbr_F1[0])+0.5*mu*(U[1]-nbr_U[0])*un[0];,
            NF2[1] = 0.5*(F2[1]+nbr_F2[0])+0.5*mu*(U[1]-nbr_U[0])*un[1];,
            NF3[1] = 0.5*(F3[1]+nbr_F3[0])+0.5*mu*(U[1]-nbr_U[0])*un[2];
        )
    }
    
    // INTRAPHASE
    AMREX_GPU_HOST_DEVICE
    void F_NF_ICS(const amrex::Real & t, const amrex::Real * x, const amrex::Real * un,
                  const amrex::Real * U, const amrex::Real * nbr_U,
                  AMREX_D_DECL(amrex::Real * NF1, amrex::Real * NF2, amrex::Real * NF3)) const
    {
        amrex::Real AMREX_D_DECL(F1[N_U], F2[N_U], F3[N_U]);
        amrex::Real AMREX_D_DECL(nbr_F1[N_U], nbr_F2[N_U], nbr_F3[N_U]);

        this->F_F(t, x, U, AMREX_D_DECL(F1, F2, F3));
        this->F_F(t, x, nbr_U, AMREX_D_DECL(nbr_F1, nbr_F2, nbr_F3));

        this->F_NF_BASE(t, x, un, U, nbr_U, AMREX_D_DECL(F1, F2, F3), AMREX_D_DECL(nbr_F1, nbr_F2, nbr_F3), AMREX_D_DECL(NF1, NF2, NF3));
    }

    // GRID BOUNDARY
    AMREX_GPU_HOST_DEVICE
    void F_NF_BCS(const amrex::Real & t, const amrex::Real * x, const amrex::Real * un,
                  const amrex::Real * U,
                  AMREX_D_DECL(amrex::Real * NF1, amrex::Real * NF2, amrex::Real * NF3)) const
    {
        amrex::Real AMREX_D_DECL(F1[N_U], F2[N_U], F3[N_U]);
        amrex::Real a[AMREX_SPACEDIM];
        this->F_a(t, x, a);
        const amrex::Real a_dot_un = AMREX_D_PICK(a[0]*un[0], a[0]*un[0]+a[1]*un[1], a[0]*un[0]+a[1]*un[1]+a[2]*un[2]);
        const amrex::Real mu = std::abs(a_dot_un);
        amrex::Real U_exact[N_U], AMREX_D_DECL(F1_exact[N_U], F2_exact[N_U], F3_exact[N_U]);

        this->F_F(t, x, U, AMREX_D_DECL(F1, F2, F3));

        if (a_dot_un < 0.0)
        {
            this->F_EXACT(t, x, U_exact);
            this->F_F(t, x, U_exact, AMREX_D_DECL(F1_exact, F2_exact, F3_exact));

            // dom = 0
            AMREX_D_TERM
            (
                NF1[0] = 0.5*(F1[0]+F1_exact[0])+0.5*mu*(U[0]-U_exact[0])*un[0];,
                NF2[0] = 0.5*(F2[0]+F2_exact[0])+0.5*mu*(U[0]-U_exact[0])*un[1];,
                NF3[0] = 0.5*(F3[0]+F3_exact[0])+0.5*mu*(U[0]-U_exact[0])*un[2];
            )

            // dom = 1
            AMREX_D_TERM
            (
                NF1[1] = 0.5*(F1[1]+F1_exact[1])+0.5*mu*(U[1]-U_exact[1])*un[0];,
                NF2[1] = 0.5*(F2[1]+F2_exact[1])+0.5*mu*(U[1]-U_exact[1])*un[1];,
                NF3[1] = 0.5*(F3[1]+F3_exact[1])+0.5*mu*(U[1]-U_exact[1])*un[2];
            )
        }
        else
        {
            // dom = 0
            AMREX_D_TERM
            (
                NF1[0] = F1[0];,
                NF2[0] = F2[0];,
                NF3[0] = F3[0];
            )

            // dom = 1
            AMREX_D_TERM
            (
                NF1[1] = F1[1];,
                NF2[1] = F2[1];,
                NF3[1] = F3[1];
            )
        }
    }

    // INTERNAL BOUNDARY
    AMREX_GPU_HOST_DEVICE
    void F_NF_PHI_BCS(const int & dom,
                      const amrex::Real & t, const amrex::Real * x, const amrex::Real * un,
                      const amrex::Real * U,
                      AMREX_D_DECL(amrex::Real * NF1, amrex::Real * NF2, amrex::Real * NF3)) const
    {
        amrex::Real AMREX_D_DECL(F1[N_U], F2[N_U], F3[N_U]);
        amrex::Real a[AMREX_SPACEDIM];
        this->F_a(t, x, a);
        const amrex::Real a_dot_un = AMREX_D_PICK(a[0]*un[0], a[0]*un[0]+a[1]*un[1], a[0]*un[0]+a[1]*un[1]+a[2]*un[2]);
        const amrex::Real mu = std::abs(a_dot_un);
        amrex::Real U_exact[N_U], AMREX_D_DECL(F1_exact[N_U], F2_exact[N_U], F3_exact[N_U]);

        this->F_F(t, x, U, AMREX_D_DECL(F1, F2, F3));

        if (a_dot_un < 0.0)
        {
            this->F_EXACT(t, x, U_exact);
            this->F_F(t, x, U_exact, AMREX_D_DECL(F1_exact, F2_exact, F3_exact));

            // dom = 0
            AMREX_D_TERM
            (
                NF1[0] = 0.5*(F1[0]+F1_exact[0])+0.5*mu*(U[0]-U_exact[0])*un[0];,
                NF2[0] = 0.5*(F2[0]+F2_exact[0])+0.5*mu*(U[0]-U_exact[0])*un[1];,
                NF3[0] = 0.5*(F3[0]+F3_exact[0])+0.5*mu*(U[0]-U_exact[0])*un[2];
            )

            // dom = 1
            AMREX_D_TERM
            (
                NF1[1] = 0.5*(F1[1]+F1_exact[1])+0.5*mu*(U[1]-U_exact[1])*un[0];,
                NF2[1] = 0.5*(F2[1]+F2_exact[1])+0.5*mu*(U[1]-U_exact[1])*un[1];,
                NF3[1] = 0.5*(F3[1]+F3_exact[1])+0.5*mu*(U[1]-U_exact[1])*un[2];
            )
        }
        else
        {
            // dom = 0
            AMREX_D_TERM
            (
                NF1[0] = F1[0];,
                NF2[0] = F2[0];,
                NF3[0] = F3[0];
            )

            // dom = 1
            AMREX_D_TERM
            (
                NF1[1] = F1[1];,
                NF2[1] = F2[1];,
                NF3[1] = F3[1];
            )
        }
    }

    // INTERNAL INTERFACE
    AMREX_GPU_HOST_DEVICE
    void F_NF_PHI_ICS(const int & dom,
                      const amrex::Real & t, const amrex::Real * x, const amrex::Real * un,
                      const amrex::Real * U, const amrex::Real * nbr_U,
                      AMREX_D_DECL(amrex::Real * NF1, amrex::Real * NF2, amrex::Real * NF3)) const
    {
        amrex::Real AMREX_D_DECL(F1[N_U], F2[N_U], F3[N_U]);
        amrex::Real AMREX_D_DECL(nbr_F1[N_U], nbr_F2[N_U], nbr_F3[N_U]);
        amrex::Real a[AMREX_SPACEDIM];
        this->F_a(t, x, a);
        const amrex::Real a_dot_un = AMREX_D_PICK(a[0]*un[0], a[0]*un[0]+a[1]*un[1], a[0]*un[0]+a[1]*un[1]+a[2]*un[2]);

        this->F_F(t, x, U, AMREX_D_DECL(F1, F2, F3));
        this->F_F(t, x, nbr_U, AMREX_D_DECL(nbr_F1, nbr_F2, nbr_F3));

        if (a_dot_un < 0.0)
        {
            this->F_NF_PHI_BASE(t, x, un, U, nbr_U, AMREX_D_DECL(F1, F2, F3), AMREX_D_DECL(nbr_F1, nbr_F2, nbr_F3), AMREX_D_DECL(NF1, NF2, NF3));
        }
        else
        {
            // dom = 0
            AMREX_D_TERM
            (
                NF1[0] = F1[0];,
                NF2[0] = F2[0];,
                NF3[0] = F3[0];
            )

            // dom = 1
            AMREX_D_TERM
            (
                NF1[1] = F1[1];,
                NF2[1] = F2[1];,
                NF3[1] = F3[1];
            )
        }
    }
    // ================================================================

    // ADDITIONAL FUNCTIONS FOR POST-PROCESSING =======================
    AMREX_GPU_HOST_DEVICE
    void F_SOL(const amrex::Real & t, const amrex::Real * x,
               const amrex::Real * PHI, AMREX_D_DECL(const amrex::Real * dPHIdx1, const amrex::Real * dPHIdx2, const amrex::Real * dPHIdx3),
               const amrex::Real * U, AMREX_D_DECL(const amrex::Real * dUdx1, const amrex::Real * dUdx2, const amrex::Real * dUdx3),
               amrex::Real * F) const
    {
        // PARAMETERS

        // EXACT SOLUTION
        amrex::Real Ue[N_U];

        this->F_EXACT(t, x, Ue);

        // FIELD EXPRESSIONS
        F[0] = U[0];
        F[1] = U[0]-Ue[0];
        F[2] = U[1];
        F[3] = U[1]-Ue[1];
    }
    // ================================================================
};
// ####################################################################
