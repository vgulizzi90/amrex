# SPACE ###############################################################
space.is_periodic = 0 0
space.lo          = 0.0 0.0
space.hi          = 7.5 3.75
#######################################################################



# TIME ################################################################
#time.T = 1.2e-5
time.T = 0.2921464429
time.n_steps = 50000
#######################################################################



# DISCRETIZATION ######################################################
# GRID ================================================================
grid.n_cells      = 2048 1024
grid.max_box_size = 8 8
grid.CFL = 0.3

# LEVEL SET FUNCTIONS
grid.space_p = 2
grid.space_q = 2
# =====================================================================

# IMPLICITLY-DEFINED MESH =============================================
implicit_mesh.space_q = 0
implicit_mesh.space_q_ie = 0

implicit_mesh.volume_fraction_threshold = 0.3
# =====================================================================

# DISCONTINUOUS GALERKIN METHOD =======================================
dG.space_p = 0
# =====================================================================
# NOTE: To activate Finite-Volume within the dG framework, it is
#       necessary to set dG.space_p = 0.
#######################################################################



# PROBLEM #############################################################
problem.int_params = 1

#problem.params = 1.6666666666666667 3.61e-4 0.0 7.42e6 4.2041015625 3.29e-5 0.0 1.95e4 5.2 49.0
problem.params = 1.6666666666666667 10.9726443769 0.0 380.5128205128 4.2041015625 1.0 0.0 1.0 5.2 49.0
#######################################################################
# NOTE: int_params and params contains the parameters of the problem,
#       which should be input as follows
#
#       int_param: eb_flag
#       params: gamma, rhoL, uL, pL, Sx, rhoR, uR, pR, Px, theta (degree)
#
#       where:
#       - eb_flag: flag to activate the embedded boundary
#                  0: no embedded boundary is present and a Riemann
#                     problem is basically solved
#                  1: a plane is embedded into the grid
#
#       - gamma: specific heats ratio
#       - (rhoL, uL, pL): left state
#       - Sx: the shock location
#       - (rhoR, uR, pR): right state
#       - Px: the x coordinate of the point P(Px,0) on the plane
#       - theta: the plane orientation.
#
#######################################################################



# POST-PROCESSING INFO ################################################
plot_int = 1000
#######################################################################